"""
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Apr. 17, 2024
These changes have given us the ability to better test how 
inputs impact alignments against the reference. I'm now 
testing the downstream SNP variant calling and phasing on 
the assemblies to compare accuracy, and plan to run sniffles2
to check the structural integrity. We may be able to leave 
the original alignment filtering in place. With that in mind,
I'm continuing this branch with the intent of using the 
AGPFile class to help facilitate merging the annotations
from this and other software we're using (longstitch/ntLink).
These annotations will be output as a bedfile for viewing in 
IGV.

Doing so will allow us to visualize what breakpoints 
correspond to the read-based and reference-based scaffolding
and gap-filling.

Noticed that while they have the same contigs together, 
ARKS orders ntLink1 - ntLink0 - tig0000004, RagTag scaffold
does it tig0000004 - ntLink0 - ntLink1 when operating on 
ntLink-only scaffolds and gapfills


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Apr. 15, 2024
ran debug patch
saw there were still plenty of good alignments at the merge
working theory: ctg_alns[i].has_internal_ref_cuttings(max_term_dist)
filters out all alignments since they're fully embedded in query sequences
changed --check-joins to default to false

Ok switching gears now that I'm getting a better sense of where alns are actually filtered
...
I updated ContigAlignment.filter_lengths() to include short alignments IF the contig is wholly contained in the query sequence
I changed ragtag_patch.py main() to filter specific alignments rather than whole query sequences
now ContigAlignment.filter_internal_ref_cuttings()
used to be ContigAlignment.has_internal_ref_cuttings()
This is still causing problems. Because structural variants SHOULD be common in this region,
I'm dropping the filter for now. It's breaking the most contiguous, well supported sequence
we have. 

Also:
    noticing that my test data set may not be the most filtered set of contigs, I'm going to go back a step in the process, and run filtered contigs > read based scaffolding > reference based patching WITHOUT reference based scaffolding to see how that works, while it runs I'll mark up some potential edits to the ragtag code

This test will use --keep-short-tigs and no internal_ref_cuttings filter
All reference haplotypes will be included for patching

Trying to retouch build_aln_scaffold_graph()

seeing cleaner results with ntLink providing gap-filling, but it's still not perfect
Need to circle back to testing out how to leverage known scaffolds more
need to see how we would build a read-alignment QC stage to determine final path


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# Apr. 12, 2024
# # Began Fork
# # Added argument --check-joins to ragtag_patch.py 
# # Made warning that this is not compatible with fills
# # Created modification_notes.txt to hold edits
# # Started reviewing data structure of scaffold graphs
    # ScaffoldGraphBase 
      # # nodes -- strings ending in "_b" or "_e" correspond
        # to the beginnings and ends of contigs
      # # edges -- define weight and metadata connecting 
        # contigs
        
    # MultiScaffoldGraph
      # # used in scaffolding applications where adjacencies
        # are supported by multiple pieces of evidence, e.g.
        # multiple AGP files or multiple ultra long reads
      --- This may be a good way to incorporate verification
      ~ ~ merge(self)
        ~ Combine edges connecting the same nodes, return
        ~ a new SG graph
        
    # ScaffoldGraph
      # # inherits from ScaffoldGraphBase, adds
        # functionality that doesn't work in Multi, utilities
        # to compute scaffolding solutions
        
    # AGPMultiScaffoldGraph 
      # # Inherits from MultiScaffoldGraph, AGP-specific
        # Draws upon AssemblyPoint object to build graph,
        # including for unknown orientations
      ~ ~ __init__() builds graph from fasta (typically $path.ctg.fasta)
      ~ ~ _get_assembly_points(self, agp, weight)
        ~ reads all adjacencies defined by a single AGP
        ~ file, yielding them as APs weighted by 'weight'
      ~ ~ add_agps(self, in_agps, in_weights=None, exclusion_set=None)
        ~ zips in_agps with in_weights and iterates over the 
        ~ combination, using self._get_assembly_points(agp, weight)
        ~ Then run ap.get_realizations() and add each as a new
        ~ edge
        
    # AssemblyPoint (AP)
      # # Represents a sequence adjacency between two 
        # sequences with independent orientations
      # # Attributes include confidence value
        # known or unknown size?
        # Length?
        # What kind of gap?
        # What evidence?
    # PatchScaffoldGraph
      # # Directed scaffold graph, DOES NOT INHERIT
      # # 
# # Reviewed ragtag_patch.py
    ~ read_genome_alignments(aln_file, query_blacklist, ref_black_list)
    ~ ~ Uses PAFReader(aln_file) to read in alignments
      ~ Then it stores these to a dictionary
      ~ keys are query sequences, values are lists of
      ~ alignment details for each one corresponding to the
      ~ query, irrespective of reference sequence
      ~ THEN it stores the final dict with each query 
      ~ corresponding to a ContigAlignment object
      
    ~ main()
    ~ ~ begins with parameter validation
      ~ this ends line ~300
      ~ breaks reference (contig) assembly at gaps
      ~ ~ sends to .ctg.agp and .ctg.fasta
      ~ ~ using ragtag_splitasm.py
      ~ renames query (validated reference) sequences
      ~ ~ sends to .rename.agp and .rename.fasta
      ~ ~ using ragtag_rename.py
      ~ combines both for components fasta
      ~ ~ writes to .comps.fasta
      ~ ~ using pysam.FastaFile to read
      ~ This prelude finishes line ~370
      ~
      ~ Maps query (validated reference) to reference contigs
      ~ converts to PAF if using Nucmer
      ~ reads in alignments, 
      ~ ~ Uses read_genome_alignments()
      ~ ~ Stores to dict of ContigAlignment objects
      ~ filters the alignments by:
        - unique length > 1kb
        - mapq > 10
      ~ merge alignments, then filter by:
        - total length > 50kb
        - within 5% of contig terminal
      ~
      ~ line 468
      ~ make AGPMultiScaffoldGraph from original ref contig adjacencies
      ~ merge() to make a ScaffoldGraph
      ~ make PatchScaffoldGraph from this
      ~ make PatchScaffoldGraph from alignments
      
!# # Reviewed ContigAlignment.py
!    # ONE self.query_header and self.query_length for each
!    # remaining PAF fields stored in 10 lists, one for 
!    # each field
!    ~ unique_anchor_filter() !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!    ~ ~ uses ragtag_utilities/utilities.py summarize_planesweep()
!      ~ summarize_planesweep()
!          ~ returns the sections of alignments that are unique IF 
          ~ they're long enough (>1000 bp)
    ~ merge_alns()
    ~ ~ merges close alignments to the same ref
    ~ ~ checks for only short gaps on the ref default
    ~ ~ checks for short ref AND query gaps if careful_merge=True
    ~ filter_mapq(self, q)
    ~ ~ remove alns with quality < q
    ~ filter_lengths(self, l)
    ~ ~ remove alns shorter than length l
    ~ keep_terminals(self, max_term_dist)
    ~ ~ filters to alignments < max_term distance from
    ~ ~ reference terminals
    

          
      
"""
